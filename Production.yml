---
Parameters:
    MyKeyPair:
      Type: AWS::EC2::KeyPair::KeyName
      Description: Choose the keypair you have access to
      ConstraintDescription: Must be Development
    Environment:
      Type: String
      Description: Select the profile for Production or Development
      Default: Development
      AllowedValues:
        - Production
        - Development
      ConstraintDescription: Must be either Production or Development
Conditions:
  isProduction:
    !Equals [!Ref Environment, "Production"]
  isntProduction:
    !Not [!Equals [!Ref Environment, "Development"]]

Mappings:
  RegionMap:
    us-east-1:
      AMALINUX: ami-0080e4c5bc078760e
    us-east-2:
      AMALINUX: ami-0cd3dfa4e37921605
    us-west-1:
      AMALINUX: ami-0ec6517f6edbf8044
    us-west-2:
      AMALINUX: ami-01e24be29428c15b2
    sa-east-1:
      AMALINUX: ami-05145e0b28ad8e0b2
    ca-central-1:
      AMALINUX: ami-07423fb63ea0a0930
    eu-west-1:
      AMALINUX: ami-08935252a36e25f85
    eu-west-2:
      AMALINUX: ami-01419b804382064e4
    eu-west-3:
      AMALINUX: ami-0dd7e7ed60da8fb83
    eu-central-1:
      AMALINUX: ami-0cfbf4f6db41068ac
    ap-southeast-1:
      AMALINUX: ami-05b3bcf7f311194b3
    ap-southeast-2:
      AMALINUX: ami-02fd0b06f06d93dfc
    ap-northeast-1:
      AMALINUX: ami-00a5245b4816c38e6
    ap-northeast-2:
      AMALINUX: ami-00dc207f8ba6dc919
    ap-south-1:
      AMALINUX: ami-0ad42f4f66f6c1cc9
    cn-north-1:
      AMALINUX: ami-8e6aa0e3

  InstanceDetails:
    Development:
      "EC2": "t3.micro"
      "AccountId": 777788889999
      "VpcId": 77778888
      "SubNetID": "subnet-77889900"
      "vpcexport": "dev-vpc1"
      "subnetexport": "dev-protected1"
    Production:
      "EC2": "c5n.xlarge"
      "AccountId": 11112223333
      "VpcId": 11112222
      "SubNetID": "subnet-11223344"
      "vpcexport": "prod-vpc1"
      "subnetexport": "prod-protected1"

Resources:
  AppInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX] # Dynamic mapping + Pseudo Parameter
      InstanceType: !FindInMap [InstanceDetails, !Ref Environment, EC2]
      SubnetId: !FindInMap [InstanceDetails, !Ref Environment, SubNetID]
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeType: gp2
            VolumeSize: 10
            DeleteOnTermination: true
      SecurityGroupIds: !Ref AppSG
      KeyName: !Ref MyKeyPair
      IamInstanceProfile: !Ref AppTempInstanceProfile
      UserData:
        # This script below installs AmazonCloudWatchAgent
        # This script will only run during initial instance launch/setup.
        # This script will trigger configsets of default
        # After the execution of the default ConfigSets the cfn-signal will be returned
        Fn::Base64: !Sub |
          #!/bin/bash
          rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ASGLaunchConfiguration --region ${AWS::Region} --configsets default
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource ASGLaunchConfiguration --region ${AWS::Region}
  Metadata:
    AWS::CloudFormation::Init:
      configSets:
        # These scripts will run during the instance launch triggered by the userData
        default:
          - 01_setupCfnHup
          - 02_config-amazon-cloudwatch-agent
          - 03_restart_amazon-cloudwatch-agent
        # These scripts will run during an update of the instance metadata = stack update.
        UpdateEnvironment:
          - 02_config-amazon-cloudwatch-agent
          - 03_restart_amazon-cloudwatch-agent
      # Definition of json configuration of AmazonCloudWatchAgent
      02_config-amazon-cloudwatch-agent:
        files:
          '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
            content: !Sub |
              {
                "metrics": {
                  "append_dimensions": {
                    "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                    "ImageId": "${!aws:ImageId}",
                    "InstanceId": "${!aws:InstanceId}",
                    "InstanceType": "${!aws:InstanceType}"
                  },
                  "aggregation_dimensions" : [["AutoScalingGroupName"]],
                  "metrics_collected": {
                    "mem": {
                      "measurement": [
                        "mem_used_percent"
                      ]
                    }
                  }
                }
              }
      # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
      03_restart_amazon-cloudwatch-agent:
        commands:
          01_stop_service:
            command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
          02_start_service:
            command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
      # Cfn-hup setting, it is to monitor the change of metadata.
      # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
      01_setupCfnHup:
        files:
          '/etc/cfn/cfn-hup.conf':
            content: !Sub |
              [main]
              stack=${AWS::StackId}
              region=${AWS::Region}
              interval=1
            mode: '000400'
            owner: root
            group: root
          '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
            content: !Sub |
              [cfn-auto-reloader-hook]
              triggers=post.update
              path=Resources.ASGLaunchConfiguration.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
              action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ASGLaunchConfiguration --region ${AWS::Region} --configsets UpdateEnvironment
              runas=root
            mode: '000400'
            owner: root
            group: root
          '/lib/systemd/system/cfn-hup.service':
            content: |
              [Unit]
              Description=cfn-hup daemon
              [Service]
              Type=simple
              ExecStart=/opt/aws/bin/cfn-hup
              Restart=always
              [Install]
              WantedBy=multi-user.target
        commands:
          01enable_cfn_hup:
            command: |
              systemctl enable cfn-hup.service
          02start_cfn_hup:
            command: |
              systemctl start cfn-hup.service
  AppSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !FindInMap [InstanceDetails, !Ref Environment, VpcId]
      GroupDescription: Security group used for the test
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: sg-33334444

  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: AppTempInstanceProfile
      Roles:
        - !Ref AppRole

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy
      RoleName: AppRole

Outputs:
  VpcId:
    Description: VPC details exported
    Value: !FindInMap [InstanceDetails, !Ref Environment, VpcId]
    Export:
      Name: !FindInMap [InstanceDetails, !Ref Environment, vpcexport]
  SubNetID:
    Description: Subnet details exported
    Value: !FindInMap [InstanceDetails, !Ref Environment, SubNetID]
    Export:
      Name: !FindInMap [InstanceDetails, !Ref Environment, subnetexport]
